using Common;
using NTLMMessageParse.Models;
using NTLMMessageParse.Models.Challenge;
using NTLMMessageParse.Models.Negotiate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NTLMMessageParse
{
    public class NTLMClient
    {
        uint SequenceNumber = 0;

        byte[] ClienSigningKey;
        byte[] ServerSigningKey;
        byte[] ClienSealingKey;
        byte[] ServerSealingKey;

        static byte[] ClienSigningConstant = new byte[] {0x73,0x65,0x73,0x73,0x69,0x6f,0x6e,0x20,0x6b,0x65,0x79,0x20,0x74,0x6f,0x20,0x63
          ,0x6c,0x69,0x65,0x6e,0x74,0x2d,0x74,0x6f,0x2d,0x73,0x65,0x72,0x76,0x65,0x72,0x20
          ,0x73,0x69,0x67,0x6e,0x69,0x6e,0x67,0x20,0x6b,0x65,0x79,0x20,0x6d,0x61,0x67,0x69
          ,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x00};
        static byte[] ServerSigningConstant = new byte[] {0x73,0x65,0x73,0x73,0x69,0x6f,0x6e,0x20,0x6b,0x65,0x79,0x20,0x74,0x6f,0x20,0x73
          ,0x65,0x72,0x76,0x65,0x72,0x2d,0x74,0x6f,0x2d,0x63,0x6c,0x69,0x65,0x6e,0x74,0x20
          ,0x73,0x69,0x67,0x6e,0x69,0x6e,0x67,0x20,0x6b,0x65,0x79,0x20,0x6d,0x61,0x67,0x69
          ,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x00};

        static byte[] ClienSealingConstant = new byte[] {0x73,0x65,0x73,0x73,0x69,0x6f,0x6e,0x20,0x6b,0x65,0x79,0x20,0x74,0x6f,0x20,0x63
          ,0x6c,0x69,0x65,0x6e,0x74,0x2d,0x74,0x6f,0x2d,0x73,0x65,0x72,0x76,0x65,0x72,0x20
          ,0x73,0x65,0x61,0x6c,0x69,0x6e,0x67,0x20,0x6b,0x65,0x79,0x20,0x6d,0x61,0x67,0x69
          ,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x00
        };
        static byte[] ServerSealingConstant = new byte[] {0x73,0x65,0x73,0x73,0x69,0x6f,0x6e,0x20,0x6b,0x65,0x79,0x20,0x74,0x6f,0x20,0x73
          ,0x65,0x72,0x76,0x65,0x72,0x2d,0x74,0x6f,0x2d,0x63,0x6c,0x69,0x65,0x6e,0x74,0x20
          ,0x73,0x65,0x61,0x6c,0x69,0x6e,0x67,0x20,0x6b,0x65,0x79,0x20,0x6d,0x61,0x67,0x69
          ,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x00
        };

        public List<byte> CreateType1()
        {
            NegotiateMessage negotiateMessage = NegotiateMessage.CreateDefaultNegotiateMessage();
            return negotiateMessage.DumpBinary();
        }

        public List<byte> ParseType2AndCreateType3(byte[] Type2data, string userName, string password)
        {
            ChallengeMessage type2 = new ChallengeMessage(Type2data);
            var type3 = type2.CreateType3(userName, password);
            byte[] masterKey;
            if (type2.NegotiateFlag.HasFlag(NegotiateFlags.NEGOTIATE_KEY_EXCH))
            {
                masterKey = type3.NtChallengeResponseField.VariableNTLMv2Response.RandomSessionKey;
            }
            else
            {
                masterKey = type3.NtChallengeResponseField.VariableNTLMv2Response.UserSessionKey;
            }
            var keyLength = 5;
            if (type3.NegotiateFlag.HasFlag(NegotiateFlags.NEGOTIATE_128))
            {
                keyLength = 16;
            }
            else if (type3.NegotiateFlag.HasFlag(NegotiateFlags.NEGOTIATE_56))
            {
                keyLength = 7;
            }
            ComputeSubkeyGeneration(masterKey, keyLength);
            return type3.DumpBinary();
        }

        void ComputeSubkeyGeneration(byte[] masterKey, int keyLength)
        {
            ClienSigningKey = HashUtils.MD5Compute(masterKey.Concat(ClienSigningConstant).ToArray());
            ServerSigningKey = HashUtils.MD5Compute(masterKey.Concat(ServerSigningConstant).ToArray());

            var tmpmasterKey = masterKey.Skip(keyLength);
            ClienSealingKey = HashUtils.MD5Compute(tmpmasterKey.Concat(ClienSealingConstant).ToArray());
            ServerSealingKey = HashUtils.MD5Compute(tmpmasterKey.Concat(ServerSealingConstant).ToArray());
        }

        public byte[] CreateClienSigning(byte[] data)
        {
            HashUtils.HMACMD5Compute(SequenceNumber.GetBytes().Concat(data).ToArray(), ClienSigningKey);



            return null;
        }

    }
}
